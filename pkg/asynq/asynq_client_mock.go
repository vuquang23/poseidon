// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vuquang23/poseidon/pkg/asynq (interfaces: IAsynqClient)

// Package asynq is a generated GoMock package.
package asynq

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIAsynqClient is a mock of IAsynqClient interface.
type MockIAsynqClient struct {
	ctrl     *gomock.Controller
	recorder *MockIAsynqClientMockRecorder
}

// MockIAsynqClientMockRecorder is the mock recorder for MockIAsynqClient.
type MockIAsynqClientMockRecorder struct {
	mock *MockIAsynqClient
}

// NewMockIAsynqClient creates a new mock instance.
func NewMockIAsynqClient(ctrl *gomock.Controller) *MockIAsynqClient {
	mock := &MockIAsynqClient{ctrl: ctrl}
	mock.recorder = &MockIAsynqClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAsynqClient) EXPECT() *MockIAsynqClientMockRecorder {
	return m.recorder
}

// EnqueueTask mocks base method.
func (m *MockIAsynqClient) EnqueueTask(arg0 context.Context, arg1, arg2, arg3 string, arg4 interface{}, arg5 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnqueueTask", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnqueueTask indicates an expected call of EnqueueTask.
func (mr *MockIAsynqClientMockRecorder) EnqueueTask(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueTask", reflect.TypeOf((*MockIAsynqClient)(nil).EnqueueTask), arg0, arg1, arg2, arg3, arg4, arg5)
}
